AngularJS 기본 개념

AngularJS를 쉽게 이해하기 위해서 알아두어야 할 기본 개념 5가지

(출처 : http://www.nextree.co.kr/p3241/)

* 클라이언트 사이드에서의 MVC 모델 사용 또는 MVVM 모델 사용.

1. Scope

    Scope는 모델 변경을 감지하고 표현하기위한 책임을 갖는다
    Scope는 DOM 구조와 가깝게 하이어라키-hierarchy(위계 제도, 조직, 업무지시권한이 상부에 있는 것) 구조를 갖는다

2. Model

    모델은 화면 템플릿에 합쳐지는 '데이터를 가지고 있는 일반 자바스크립트 객체'이다. (데이터라고 생각하면 된다.)   
    Scope는 항상 모델을 참조하고 있다.

3. View

    템플릿 스트링과 모델을 합쳐서 HTML을 만들고 DOM으로 해석되어 Browser에 표현된다.
    Angular는 템플릿이 HTML이어서 바로 DOM으로 해석되고 DOM안에 directive가 
    템플릿 엔진인 $compile지시어를 통해 $watch를 설정하고 모델의 변경을 계속 감시하게 된다.

    View는 템플릿으로 Scope의 투영체이고, Scope는 Model과 View의 연결하며 controller로 이벤트를 보내는 역할을 한다.

4. Controller

Controller는 View뒤에서 반드시 수행하는 코드이다.
Controller 역할은 모델을 생성하고 콜백 메소드를 가지고 View로 퍼블리싱을 담당한다 .
Controller 는 자바스크립트이고 업무적 행위를 정의한다. 또한 DOM rendering 정보가 일체 없다 .
5. Directives (지시어)

지시어는 HTML 을 확장하여 주고 행위를 일으키는 주체이다 .
예를들어 앞의 예제에서 보았듯이 데이터 바인딩을 위한 이중 중괄호 표기{{}}, 컨트롤러가 뷰의 어느 부분을 감독할지를 지정하는 ng-controller, 인풋을 해당 모델의 구성물에 바인딩하는 ng-model 모두 Directive를 이용한 확장 문법이다.


-----------------------------------------------

AngularJS 적용

    정적인 페이지인 index.html에 AngularJS를 적용하기 위해서는 AngularJS에서 제공하는 특별한 속성을 사용해야 한다. 바로 ng-app 이다. AngularJS를 적용하고자 하는 최상위 DOM 노드에 속성으로 ng-app을 작성한다.

    이렇게 ng-app을 작성하였으면 해당 HTML문서를 템플릿으로서 작성을 할 수 있다. 


AngularJS의 가장 핵심은 양방향 데이터바인딩이다.

------------------------

설정 예시

var myApp = angular.module('myApp', []);

myApp.controller('UserCtrl', ['$scope', function ($scope) {
    
    // Let's namespace the user details
    // Also great for DOM visual aids too
    $scope.user = {};
    $scope.user.details = {
      "username": "Todd Motto",
      "id": "89101112"
    };
    
}]);

컨트롤러는 데이터 전용이며 서버와 통신하고 JSON 데이터를 푸시 / 풀하는 함수 (이벤트 함수도!)를 작성 한다는 점을 기억해야 합니다. 
여기서는 DOM 조작을해서는 안되므로 jQuery 툴킷을 멀리 두십시오. 지시어는 DOM 조작을위한 것이며 다음 단계입니다.

----------------------

Ionic vs React Native 

----------------------

페이지를 로딩했을 때 인풋에 포커싱을 주고 싶다면?

focus directive를 생성하면 된다.

// focus.js
app.directive('focus', function() {
  return {
    link: function(scope, element, attrs) {
      element[0].focus();
    }
  };
});

directive는 컨트롤러처럼 디렉티브의 이름과 함수를 받는다.
디렉티브는 객체를 반환해야 하고 이 반환 객체에 몇가지 속성을 정의할 수 있다.

디렉티브는 link 함수를 반환할 수 있는데 이 link함수 안에 템플릿 로직의 대부분을 작성하고,
여기서 DOM 리스너를 등록하거나 DOM을 갱신하는 등의 작업을 할 수 있다.

이 link함수는 3개의 파라미터를 받는다.(실제로는 4개지만 이는 약간 고급에 해당한다.) 
3개의 파라미터는 scope와 디렉티브를 사용한 element와 element의 속성인 attr이다. 여기서 HTML 요소에 click 이벤트나 mouseenter 이벤트를 바인드할 수 있다.


* 디렉티브는 객체를 반환해야 한다.(랜더링을 하기위한 몇가지 속성이 설정된 객체 반환 or DOM 리스너를 다루는 link 함수 반환)
---------------------

디렉티브 반환시 속성설정

속성들

restrict: 디렉티브는 여러 위치에 사용할 수 있다.

    Attribute, 예시: <div foo></div>
    Element, 예시: <foo></foo>
    Class, 예시: <div class="foo"></div>
    CoMment, 예시: <!-- directive: foo -->



    - restrict: E로 속성을 리턴해준다면 디렉티브, 즉 지시자가 엘리먼트에 한정되는 것이다. (아래 코드처럼)

    // hello.js
    app.directive('hello', function() {
    return {
        restrict: "E",
        replace: true,
        template: "<div>Hello readers, thank you for coming</div>"
    }
    });


    - replace: 이 값을 true로 설정하면 해당 요소는 새로운 템플릿으로 대체될 것이다.
    
    - template: HTML 요소에 추가할(또는 대체할) 템플릿을 여기에 둔다.

--------------------

필터

    자신만의 필터를 직접 생성해 보자. 첫글자를 대문자를 필터를 어떻게 작성하는지 보자.

        JavaScript
        
        app.filter('capitalize', function() {
            return function(input, param) {
                return input.substring(0,1).toUpperCase()+input.substring(1);
            }
        });

    필터는 인풋(인터폴레이션의 결과값이다.)과 필터 파라미터를 받는 함수를 반환하고 반환된 함수는 새로운 인풋을 반환한다. 이 예제에서는 인풋의 첫글자를 대문자로 바꿨다. 
    이제 이 필터를 사용해 보자.

        Html

        <span>{{ "this is some text" | capitalize }}</span>

            * 문자열을 문자열 리터럴로 만들기 위해 대문자로 감싼 뒤 capitalize 필터를 "파이프"로 연결하면 동작한다.

--------------------

서비스

    서비스는 무엇일까? 서비스는 어플리케이션의 어떤 기능을 제공하는 싱글톤 클래스다. 어플리케이션 로직을 컨트롤러에 분산시키는 대신 다른 서비스에 로직을 둘 수 있다.
    Angular에는 HTTP 요청을 관리하는 $http나 프로미스(Promise)에 대한 $q와 같은 많은 내장 서비스가 있다. 하지만 내장 서비스는 설명하기가 더 어렵기 때문에 다른 글에서 설명하기로 하고 여기서는 내장 서비스는 따로 설명하지 않을 것이다. 대신 간단한 서비스를 생성해 보자.
    서비스를 사용하는 가장 일반적인 경우는 컨트롤러간에 정보를 공유해야하는 경우이다. 모든 컨트롤러는 자신만의 스코프를 가지므로 다른 컨트롤러의 스코프를 바인딩할 수 없다. 이 문제를 해결하기 위해 서비스를 사용하면 한 곳에서 데이터를 가지고 있고 필요한 어디서나 이 데이터를 사용하도록 할 수 있다. 우선 문제의 상황을 보기 위해 서비스가 없는 다음 예제를 살펴보자.

    Html

    <!-- index.html -->

    <div ng-controller="MainCtrl">
        MainCtrl:
        <input type="text" ng-model="user.name">
    </div>
    <div ng-controller="SecondCtrl">
        SecondCtrl:
        <input type="text" ng-model="user.name">
    </div>

    JavaScript

    // controllers.js

    app.controller('MainCtrl', function($scope) {

    });

    app.controller('SecondCtrl', function($scope) {

    });


    위에서는 인풋을 같은 모델에 바인딩했으므로 인풋에 글을 쓰면 다른 쪽에도 업데이트 되기를 기대할 것이다. 

    MainCtrl
                    $scope      user.name
    SecondCtrl

    하지만 $scope는 다음과 같이 된다.

    MainCtrl    $scope  user.name

    SecondCtrl  $scope  user.name


    이 문제를 해결하기 위해 두 컨트롤러에서 사용할 수 있도록 사용자 이름을 가진 서비스를 생성할 것이다.

    JavaScript

    // user_information.js

    app.factory('UserInformation', function() {
        var user = {
            name: "Angular.js"
        };

        return user;
    });

    서비스를 생성하기 위해 app 모듈의 factory 함수를 사용했다. 서비스를 생성하는 좀더 고급적인 방법도 있다.(service와 provider 함수를 사용하지만 이는 다른 글에서 참고하자.) 
    서비스를 생성하는 여러가지 방법이 있지만 이 예제에서는 미리 정의해 놓은 이름으로 private 사용자 객체를 생성해서 반환했다. 이 서비스는 컨트롤러에서 다음과 같이 사용한다.

    JavaScript

    // controllers.js

    app.controller('MainCtrl', function($scope, UserInformation) {
        $scope.user = UserInformation;
    });

    app.controller('SecondCtrl', function($scope, UserInformation) {
        $scope.user = UserInformation;
    });
    
    이 예제는 다음과 같이 된다.

    MainCtrl
      user
                    UserInformation     user.name
    MainCtrl
      user

    이 예제는 의도대로 잘 동작한다. MainCtrl와 SecondCtrl 양쪽의 $scope.user는 UserInformation를 사용하고 
    서비스가 싱글톤이기 때문에 한 컨트롤러에서 UserInformation의 값을 바꾸면 다른 쪽에서도 바뀐다.

    여기서 UserInformation 파라미터가 어디서 왔는지 궁금할 것이다. Angular는 서비스를 필요로 하는 곳에 서비스를 주입하는 의존성 주입을 사용한다. 
    의존성 주입이 동작하는 방식을 설명하는 것은 이 글의 주제를 벗어나지만 간단히 말하자면 서비스를 생성하면 어느 컨트롤러나 디렉티브, 다른 서비스에도 이 서비스를 주입할 수 있다. 
    주입하는 방법은 그냥 파라미터에 서비스의 이름을 전달하면 된다. 아마 이 의존성 주입이 $scope 파라미터를 사용한 것과 같은 것인지 궁금할텐데 
    $scope는 다른 컨트롤러에 주입되기는 하지만 실제로 서비스는 아닌 예외사항 중 하나이다.

    * 의존성 주입(Dependency Injection, DI)은 프로그래밍에서 구성요소간의 의존 관계가 소스코드 내부가 아닌 외부의 설정파일 등을 통해 정의되게 하는 디자인 패턴 중의 하나이다.

